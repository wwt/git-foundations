# Git is a distributed source control management (SCM) tool
# For more details on Git, review Nick Thompson's Git presentation in MS Teams 
# This guide is a practical, hands-on exercise to familiarize you with the use of Git

#------------------------------------------------------------------------------

# Local Git Setup

## Install Git on macOS via your terminal application
### From your terminal, install Brew package manager (https://brew.sh) with the following command:

/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

## Install Git with the following command

brew install git

## Validate the installation is successful with the following command:

git --version

#------------------------------------------------------------------------------

# Install Python3 on macOS via your terminal application

## The sample script in this guide requires a Python 3.x interpreter
## macOS does not have a built-in Python 3.x interpreter

## From your terminal, notice the default macOS Python version with the following command:

python -V

## From your terminal, install Python 3.x with the following command:

brew install python3

## Validate the installation is successful with the following command:

python3 -V

#------------------------------------------------------------------------------

# Setup SSH key authentication with https://github.wwt.com

## From your terminal, Check to see if you already have an SSH key with the following command:

cat ~/.ssh/id_rsa.pub

## If id_rsa.pub does not exist, generate an ssh key pair with the following command:

ssh-keygen

## Use the output of the following command to view the entire contents of your SSH key:

cat ~/.ssh/id_rsa.pub

## Copy the entire contents to your clipboard
## Log on to https://github.wwt.com (ATC VPN required)
## Click on your profile icon in the upper-right corner of the screen
## Choose 'Settings' and select the 'SSH and GPG keys' menu option
## Click the 'New SSH key' button
## Give your key a title and paste the key contents into the 'Key' input box
## Click 'Add SSH key'

#------------------------------------------------------------------------------

# View and configure your local Git settings

## From your terminal, view your systemwide Git settings with the following command:

cat /usr/local/etc/gitconfig

## Git global settings are user-specific and take precedence over over systemwide settings
## View your global Git settings with the following command:

cat ~/.gitconfig

## Configure your global Git username and email address with the following commands

git config --global user.name "Kris Smith"
git config --global user.email "kris.smith@wwt.com"

## Review your updated global Git settings with the following command:

cat ~/.gitconfig

## Every Git repository on your computer has its own configuration settings
## To view repository-specific settings use the following command:

# cat .git/config

## Within any Git repository on your computer, you may configure specific settings
## Repository-specific settings take precedence over global and systemwide settings
## From the Git repository directory, you can use commands like these:

# git config user.name "Kris Smith"
# git config user.email "kris.smith@wwt.com"

#------------------------------------------------------------------------------

# GitHub repository setup

## A best practice is to create/initialize all Git repositories from the central repository
### This provides the benefit of automatically generating README and .gitignore files
### In our case, that is https://github.wwt.com

## Log on to https://github.wwt.com (ATC VPN required)
## Click the, 'Start a project' button to create a new repository
## Give your new repository a name and a description
### The name and description values pre-populate the README file
## Choose to make your repository public or private
## Tick the box to 'Initialize this repository with a README'
## Expand the 'Add a '.gitignore:' dropdown and type or choose 'Python'
## Click the 'Create repository' button
## Review the '.gitignore' and 'README.md' files in your repository

#------------------------------------------------------------------------------

# Create a branch for your GitHub repository

## Log on to https://github.wwt.com (ATC VPN required)
## Open your Git repository
### From the home screen, your repository list is on the left
## Click the 'Branch: master' button
### Type the name for your new branch (Branch1) and click the 'Create branch' button
### Notice you now have two branches; 'master' and your new branch

#------------------------------------------------------------------------------

# Clone your GitHub repository to your computer

## Log on to https://github.wwt.com (ATC VPN required)
## Open your Git repository
### From the home screen, your repository list is on the left
## Click the green 'Clone or download' button
### From the expanded menu choose either SSH or HTTPS
### Click the 'Copy to clipboard' button to the right of the URL

## From your terminal, navigate to the directory in which you want to download your repository
### Use the following sample command to choose a directory:

# cd ~/Documents/projects/code

## Type the command 'git clone' and then paste your repository URL as follows:

# git clone git@github.wwt.com:smithk/myRepo1.git

## List your directory contents to confirm your repository folder downloaded
### Use the following command:

ls -l

### In the output, look for a directory name which matches that of your repository

## Change to your repository with the following sample command:

# cd myRepo1

## Look at the contents of your repository directory, including hidden files
### Use the following command:

ls -la

## View the contents of your 'README.md' file with the following command:

cat README.md

## View the contents of the .git directory with the following command:

ls -l .git

## View the contents of the repository 'config' file in your .git directory
### Use the following command:

cat .git/config

### Notice the URL in the '[remote "origin"]' section
### This is a good way to check the your central repository target

#------------------------------------------------------------------------------

# Manage local Git branches

## From your terminal, use the following command to list your local branches:

git branch

## Notice that only the 'master' branch cloned to your local repository
### This is the correct behavior; other branches do not clone to local repositories

## Use the following command to list all branches, local and remote:

git branch -a

### Notice your local 'master' branch plus the remote branches

## Create a new, local branch:

git branch BranchX

## Use the following command to, again, list your local branches:

git branch

### Notice your new branch
### Notice the highlight of and asterisk next to the 'master' branch
#### The highlight and asterisk indicate your current, working branch

## Use the following command to, again, list all branches, local and remote:

git branch -a

### Notice the new local branch does not exist as a remote branch

## Switch to your new branch with the following command:

git checkout Branch2

## Use the following command to, again, list your local branches:

git branch

### Notice the highlight of and asterisk your new branch

## Use the following command to simultaneously create and switch to a new branch

git checkout -b Branch3

## Use the following command to, again, list your local branches:

git branch

### Notice the highlight of and asterisk your new branch

## Use the following command to delete one of your branches:

git branch -d BranchX

## Use the following command to, again, list your local branches:

git branch

### Notice the removal of your branch

#------------------------------------------------------------------------------

# Make changes to your repository within your local branch

## From your terminal, use the following command to view the status of your local repository:

git status

### Notice your working branch and that you have no changes to commit

## **The following requires a text editor and this guide uses VIM**
## **You may, alternatively, use the text editor of your choice**

## Open your .gitignore file in VIM to insert the name '.DS_Store'
### Adding the name '.DS_Store' will keep the macOS Spotlight index from syncing to GitHub
### Use the following command to open VIM:

vi .gitignore

### Use the following VIM commands to insert the necessary text and save the changes:

i # enters 'Insert' mode
# macOS Spotlight Index

# Press the 'Return' or 'Enter' key to move to a new line
.DS_Store

# Press the 'Return' or 'Enter' key, to keep the file format/readability consistency

# Press the 'esc' key

:wq

# Press the 'Return' or 'Enter' key

### Use the following command to view your changes:

git diff

## Use the following command to view the status of your local repository:

git status

### Notice the '.gitignore' file in the section, 'Changes not staged for commit'

#------------------------------------------------------------------------------

# Stage, commit, and push branches and changes to GitHub

## From your terminal, Add your '.gitcommit' file to the staging area with the following command:

git add .gitignore

## Use the following command to view the status of your local repository:

git status

### Notice the '.gitignore' file in the section, 'Changes to be committed'

## De-commit the stage of the '.gitignore' file with the following command:

git restore --staged .gitignore

### This command is useful to upstage a commit

## Use the following command to view the status of your local repository:

git status

## Re-add your '.gitcommit' file to the staging area with the following command:

git add .gitignore

## Commit your '.gitignore' file to your local repository with the following command:

git commit -m "Added '.DS_Store' to exclude macOS Spotlight Index"

### The '-m' indicates a comment follows; Git requires a comment with every commit

## Use the following command to view the status of your local repository:

git status

### Notice your working branch and that you have no changes to commit
### Optionally, you may edit commit comments with the following command:

git commit --amend

## Attempt to push your changes to GitHub with the following command:

git push

### Notice the error message
### This error occurs because the local branch does not yet exist in GitHub

## Push your local branch and committed changes to GitHub with the following command:

git push --set-upstream origin Branch3

### Notice the output indicating a new branch on GitHub:
#### 'To github.wwt.com:hullt/ex1.git'
####  '* [new branch]      Branch3 -> Branch3'

## Log on to https://github.wwt.com (ATC VPN required)
## Open your Git repository
### From the home screen, your repository list is on the left
## Click the 'Branch:' button and choose your new branch
### Notice the comment and timestamp for the '.gitignore' file within the new branch

#------------------------------------------------------------------------------

# Make additional local changes, stage files, and perform atomic commits

## From your terminal, create a simple python script within your local repository
## Use the the following command:

touch myScript.py

## Confirm your python script file, 'myScript.py' exists with the following command:

ls -l

## Use the following command to view the status of your local repository:

git status

### Notice the 'myScript.py' file in the section, 'Untracked files'

## Add the 'myScript.py' file to the staging area with the following command:

git add myScript.py

## Use the following command to view the status of your local repository:

git status

### Notice the 'myScript.py' file in the section, 'Changes to be committed'

## Commit the 'myScript.py' file to your local repository with the following command:

git commit -m "Initial commit of 'myScript.py'"

## Use the following command to view the status of your local repository:

git status

### Notice your working branch and that you have no changes to commit

## Check your commits which still require a push to GitHub with the following command:

git cherry -v

### Notice the SHA1 hash and comment for the commit

## **The following requires a text editor and this guide uses VIM**
## **You may, alternatively, use the text editor of your choice**

## Open the 'myScript.py' file in VIM to insert some python code
### Use the following VIM commands to insert the necessary text and save the changes:

vi myScript.py

i # enters 'Insert' mode

#! /usr/bin/env python
# This script says hello and requires Python version 3.x

name = input('What is your name: ')
print(f'\nWell hello, {name}.  It is nice to meet you.\n')

# Press the 'esc' key

:wq

# Press the 'Return' or 'Enter' key

### Use the following command to view your changes:

git diff

## Use the following command to view the status of your local repository:

git status

### Notice the 'myScript.py' file in the section, 'Changes not staged for commit'

## Add the 'myScript.py' file to the staging area with the following command:

git add myScript.py

## Use the following command to view the status of your local repository:

git status

### Notice the 'myScript.py' file in the section, 'Changes to be committed'

## Commit the 'myScript.py' file to your local repository with the following command:

git commit -m "Added 'input' and 'print' commands to 'myScript.py'"

## Use the following command to view the status of your local repository:

git status

### Notice your working branch and that you have no changes to commit

## Check your commits which still require a push to GitHub with the following command:

git cherry -v

### Notice the SHA1 hashes and comments for the commits

#------------------------------------------------------------------------------

# Push new changes to GitHub

## From your terminal, push your changes to GitHub with the following command:

git push

## Log on to https://github.wwt.com (ATC VPN required)
## Open your Git repository
### From the home screen, your repository list is on the left
## Make sure you are in the branch, 'Branch3'
### You can use the 'Branch:' button to choose the correct branch

## Notice the 'myScript.py' file exists in GitHub, but only in 'Branch3'
### If you change to any other branch, you will not see 'myScript.py'
### Make sure you return to 'Branch3' before continuing

## Click the 'Commits' link on the left side of the header
### Notice all of your individual/atomic commits
### Even though the 'git push' command pushes all commits at once, commits remain separate

#------------------------------------------------------------------------------

# Pull/Merge changes on GitHub (merge changes from one branch to another)

## Log on to https://github.wwt.com (ATC VPN required)
## Open your Git repository
### From the home screen, your repository list is on the left

## Locate and click the green, 'Compare & pull request' button in the header

## Review the 'Open a pull request' page and observe the following:
### The pull request defaults to merging your current branch (Branch3) to 'master'
### You may use the text input boxes to assign a title and comments to your pull request
### You may use the fields on the right side of the page to assign reviewers/assignees
#### Presumably, someone would review your changes before merging the changes
### You may review the commits, changed files, and contributors at the bottom of the page

## Locate and click the green, 'Create pull request' button below the text input boxes
### The ensuing page will give you a final opportunity to review changes

## Locate and click the green, 'Merge pull request' button to start the merge
## Click the 'Confirm merge' button to complete the merge
### You will see messages which read:
#### 'Pull request successfully merged and closed'
#### 'You’re all set—the Branch3 branch can be safely deleted'

## Click the 'Delete branch' to close the pull request and remove 'Branch3'

#------------------------------------------------------------------------------

# Review the pull request impact to your local repository

## From your terminal, pull the latest changes from GitHub to your local repository
## Use the following command:

git pull

### Notice the message indicating your local branch, 'Branch3' doe not exist in GitHub

## Use the following command to list your local branches:

git branch

### Notice 'Branch3' remains in your local repository

## Use the following command to change to the 'master' branch:

git checkout master

### Notice the message:
#### The local copy of the 'master' branch is behind the remote 'master' branch
#### The local copy of 'master' branch 'can be fast-forwarded'

## Use the following command to catch your local 'master' branch up with GitHub

git pull

### Notice the output which indicates file changes and insertions

## Use the following command to delete 'Branch3' from the local repository

git branch -d Branch3

## Use the following command to list your local branches:

git branch

### Notice the only branch in your local repository is 'master'

#------------------------------------------------------------------------------

# Clone another repository, make changes, and perform a Pull/Merge

## Use what you've learned to clone a branch from someone else's repository
### Create your own local branch for the repository
### Make changes to your local branch
### Stage, commit, and push your local changes
### Create a merge request and wait for the repository owner to merge your changes

#------------------------------------------------------------------------------

# End of file